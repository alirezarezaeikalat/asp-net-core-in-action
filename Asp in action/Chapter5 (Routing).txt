///// Chapter 5 ////////

1. There are two system for routing in ASP.NET core:
	a. Using global, convention routing (convention approach)
	b. Using attribute routing (reverse approach)

2. When we using convention routing if the the URL doesn't match the first template it goes to second
 template...
 if it matches, it tries to find the action and controller if it doesn't find the action and controller
 it goes to second template...

3. Route template is the URL that is going to be matched.

4. every route template can have:
	a. literal part (exact string)
	b. route parameter (it is the name in the braces {code})
		every thing that is not literal and not {controller} or {action} is route 
		parameter and the router parse them to action method through model binding

		for example if we have action that get id as int in this template
		 {controller=Home}/{action=Index}/{id}, if we go to /home/index/12.4
		 we get an exception to avoid this we can use constraint:

			{controller=Home}/{action=Index}/{id:int:max(10)?}
		
		[ATTENTION]
		if the entered URL does not match the constraints it goes to next template
		(http://mng.bz/U11Q)


5. In every global routing the controller and action route parameters are compulsory.
	if you don't define {controller} and {action} in your template you should define them in 
	defaults:

		routes.MapRoute(
		name: "test",
		template: "{currency=USD}/convert/{anotherCurrency}/",
		defaults: new { controller="currencies", action="View"});


6. MapRoute function that act on IRouteBuilder instance has two overloads: 
	(Picture in the word file with name of MVC routing example.docs) 
	(the second one uses anonymous object)

7. If we have url that is longer than the template and it has additional route parameter
	We can use catch-all parameter to catch the part of URL that doesn't match to the template:
	routes.MapRoute(
		name: "",
		template: "{currency}/convert/{id?}/{*others}",
		defaults: new { controller="currencies", action="View" currency="USD"});

8. In order to handle multiple matching action for the URL we can use attributes
 to specify the type of request: [HttpPost] above the action

9. Driving from controller class gives access to Url instanse(instance of IUrlHelper) 
we can generate url in action methods:
	var url = Url.Action("action name", "controller name", new {route parameter=value});
	 or 
	var url = Url.RouteUrl("Route name", new { route parameter = value });

or if we want to redirect to a url in action method we can use:

	return RedirectToAction("View", "Currency", new { id = 5 });

		or
	return RedirectToRoute("view_currency", new { code = "GBP" });



