//////// Chapter 3 //////

1. When the IIS send the request to Kestrel the Kestrel make the HttpContext of the request
 and send it to middleware pipe line, each middleware can add information to the httpContext object
 and if it not handle it sends it to next middleware, when a middleware handle the request it sends
 the response back to previous middleware. this process continues to the point that the response
 reaches the first middleware, and the first middleware send it to Kestrel and Kestrel translate
 the HttpContext to raw http response and sends it to the reverse proxy server.

2. app.useStaticFiles() function behind the scene calls the useMiddleware<StaticFilesMiddlware>();

3. Asp.net core adds an automatic dummy piece of middleware to the end of pipeline to show the
   404 not found.

4. http RESPONSE status codes grouped in five different classes:
	1xx: Information, not often used, provides the general acknowledgment.
	2xx: Success. The request was successfully handled.
	3xx: Redirections.
	4xx: Client error, There was a problem with the request.
	5xx: Server error, There was a problem on the server side.

5. Because of the bidirectional nature of the pipelines, error handling middleware should be at the
   top of pipeline to ensure to catch any errors in subsequent middleware.

6. Different type of error handling middleware:
	a. DeveloperExceptionPageMiddleware
	b. ExceptionHandlerMiddleware(re-executes the pipeline with new route
	 that define in 
		app.useExceptionHandler("/Home/Error"))
	c. StatusCodePagesMiddleware(catch any response that has an HTTP Status
		 code that starts with 4xx or 5xx and HAS NO RESPONSE BODY,
		  The above two functions only deals with 5XX errors)
	d. app.UseStatusCodePagesWithReExecute("/error/{0}");(re-executes the request with
	 routes of error/{status code}) when response comes to the UseStatusCodePagesWithReExecute again
	 this middleware change the response code to error code

7. The general path for ExceptionHandlerMiddleware:
	a. A piece of middleware throws an exception.
	b. ExceptionHandlerMiddleware catches the exception.
	c. Any partial response that has been defined is cleared.
	d. The middleware overwrites the request path with the provided error handling path.
	e. The middleware sends the request back down the pipeline, as though the original request
	 had been for the error handling path.
	f. The middleware pipeline generates a new response as normal.
	g. When the response gets back to ExceptionHandlerMiddleware, it modifies the status code to
		 a 500 error and continues to pass the response up the pipeline to
	the web server.

8. Two points in re-executing the pipeline:
	a. the middleware is only capable of handling the error before the response sends to the client
		(for example the error happens in the middle of sending response to the user)
	b. If during the re-execution another error happens, the handler middleware won't catch it for
		 the second time and the web server returns a raw 500 error. (for example the there is a
		 	error in the error page) 

8. Features:
define which capabilities the ASP.NET Core web server provides. 
Each feature is represented as an interface in the Features collection property on HttpContext.
 Middleware is free to add or replace features in the collection as part of the request, 
 thereby extending the features available to an application.

	a. StatusCodePagesMiddleware adds IStatusCodePagesFeature to the HttpContext

