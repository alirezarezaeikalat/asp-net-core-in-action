
///// Chapter 6 //////

1. The MVC in .net core has different models:
	a. Binding model (form data, route parameters, query string)
	b. Application model (domain model(services and classes), database model)
	c. View models
	d. API models

2. MVC middleware inspects the validation of binding model before the 
action executes, though the action executes even if they're not valid.

[ATTENTION]
3. The validation of binding model is different from the validation of 
	url templates, if the url templates does not valid, it goes to next 
	template, but if the validation of binding model is not valid the
	action executes anyway.

4. By default MVC look through these three sources IN ORDER, to find the value that
 matches the NAME OF THE ACTION PARAMETER or the source can be set: These three are
  by default
  (picture in the word file model binding.docs)
	a. Form values
	b. Route values
	c. Query string values
The values stored in binding sources are all strings. 

5. If model binding fails to provide the action parameter or the action parameter is 
not the same type as model binder(for example pass string for int id) parameters get
default value based on their types:
	int: 0, bool: false, reference type: new using default constructor,
	nullable types: null

6. To bind to the complex objects, the class that wants to be model-bound must have
 DEFAULT PUBLIC CONSTRUCTOR.

7. You can also bind to collections, lists, and dictionaries, for example you have
	the <select> tag with the ability to get multiple choice, you can use list to get
	these selected values:
		IActionResult ShowRates(List<string> currencies);

	then You could then POST data to this method by providing values in a number
	of different formats:
		a. currencies[index]—Where currencies is the name of the parameter to bind
			and index is the index of the item to bind, for example, currencies[0]=
			GBR&currencies[1]=USD.
		b. [index]—If there’s only a single list, you can omit the name of the 
			parameter,for example, [0]=GBR&[1]=USD.
		c. currencies—Alternatively, you can omit the index and send currencies as the
			key value for every value, for example, currencies=GBR&currencies=USD.

8. You can also send file using IFormFile interface for your action parameter,
 IFormFile provides some properties and methods for using.

			public IActionResult UploadFile(IFormFile file);
			public interface IFormFile
			{
				string ContentType { get; }
				long Length { get; }
				string FileName { get; }
				Stream OpenReadStream();
			}

		[ATTENTION]
			But you know not to trust users, right? You should
			never use the filename directly in your code

		[ATTENTION]
		When your method accepts an IFormFile instance, the whole content of the file
		is buffered in memory and on disk before you receive it. You can then use the
		OpenReadStream method to read the data out, never use IFormFile for large files
		for larger files you may need to stream the files directly to avoid saving
		all the data at once

9. You can specify the binding source for your action parameters
	(for example to read from header or to read JSON files) 
	using [FromHeader] and [FromBody] attribute behind the parameter in action method.
	 Other options are:
	a. [FromQuery]
	b. [FromRoute]
	c. [FromForm]
	d. [FromBody] this only for one parameter and it mutually exclusive with FromForm
	e. [FromHeader]

	public IActionResult TagPhotosWithUser([FromHeader] string userId)

9. Always validates users inputs in the server side.

10. You can use DataAnnotations ATTRIBUTES for model validation. There is huge 
	list of DataAnnotations but some of them are:
	a. [Range(min, max)]
	b. [EmailAddress]
	c. [Phone] 

11. It is possible to write custom attributes by driving from 
ValidationAttribute class.

[ATTENTION]
12. Validation happens automatically but the action always run despite the failure in
 validation. The output of validation stores in ModelState property of 
 ControllerBase base class. ModelState is type of ModelStateDictionary,
 which contains the validation errors. you can check ModelStateDictionary properties, to
 use them

	public IActionResult SaveUser(UserBindingModel model)
	{
		if(!ModelState.IsValid)
		{
			return View(model);
		}
		/* Save to the database, update user, return success *
		return RedirectToAction("Success");
	}

13. It is possible to customize the error message in ModelState. for example:
	[Required(ErrorMessage= "")]