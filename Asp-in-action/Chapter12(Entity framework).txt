1. EF Core is a library that provides an object-oriented way to access 
    databases. It acts as an object-relational mapper (ORM), communicating
    with the database for you and mapping database responses to .NET classes
    and objects

2. EF Core is designed to be fast and lightweight, significantly outperforming
   EF 6.x. But it’s unlikely to ever reach the performance of a more 
   lightweight ORM, such as Dapper, or handcrafted SQL statements

3. When you interact with EF Core, you’ll be primarily using POCO entities
 and a database context that inherits from the DbContext EF Core class. The 
 entity classes are the object-oriented representations of the tables in your
 database; they represent the data you want to store in the database. You use
 the DbContext in your application to both configure EF Core and to access
 the database at runtime.

4. AppDbContext that inherits from DbContext, has different DbSet<T> 
properties in it, the EF uses this DbSet<T> properties to make its internal
model.

5. Adding EF Core to an application is a multistep process:
        a. Choose a database provider; for example, MySQL, Postgres, 
            or MS SQL Server.
        b. Install the EF Core NuGet packages for that provider.
        c. Design your app’s DbContext and entities that make up your data
             model.
        d. Register your app’s DbContext with the ASP.NET Core DI container.
        e. Use EF Core to generate a migration describing your data model.
        f. Apply the migration to the database to update the database’s schema.

//// a and b. Choosing a database provider and installing NuGet ////////////

6. When you've chosen database provider, you have to install appropriate 
    NuGet package for that provider. for example for using SQL server we 
    should install these packages:
        a. Microsoft.EntityFrameworkCore.SqlServer
        b. Microsoft.EntityFrameworkCore.Design
        c. Microsoft.EntityFrameworkCore.SqlServer.Design
        d. Microsoft.EntityFrameworkCore.Tools.DotNet

//// c. Designing your app DbContext and entities ////////

7.designing the entities, EF core use conventions instead of configurations:

        [ATTENTION] pay attention to the naming of the properties
            we can use data annotation for controlling the properties
        public class Recipe
        {
            public int RecipeId { get; set; }
            public string Name { get; set; }
            public TimeSpan TimeToCook { get; set; }
            public bool IsDeleted { get; set; }
            public string Method { get; set; }
            public ICollection<Ingredient> Ingredients { get; set; }
        }
        public class Ingredient
        {
            public int IngredientId { get; set; }
            public int RecipeId { get; set; }
            public string Name { get; set; }
            public decimal Quantity { get; set; }
            public string Unit { get; set;}
        } 

8. adding AppDbContext class:

        public class AppDbContext : DbContext
        {       //The constructor options object, containing
                //details such as the connection string
            public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options) { }
            public DbSet<Recipe> Recipes { get; set; } // we use Recipes to
                                                        query database
        }

        [ATTENTION]
        We didn’t list Ingredient on AppDbContext, but it will be modeled by
        EF Core as it’s exposed on the Recipe. You can still access the 
        Ingredient objects in the database, but you have to go via the Recipe
        entity’s Ingredients property to do so.

9. This code first approach is typical, but if you have an existing database,
you can automatically generate the EF entities and DbContext instead. (More
information can be found at http://mng.bz/Ymtw.

/// d. Registering DbContext with DI container /////

10. EF core provides the AddDbContext<T>() function for registering 
    the DbContext.

    public void ConfigureServices(IServiceCollection services)
    {
        var connString = Configuration
        .GetConnectionString("DefaultConnection"); // get the DefaultConnection 
                                                // from the ConnectionStrings section
        services.AddDbContext<AppDbContext>(
            options => options.UseSqlServer(connString));
                // options is type of DbContextOptionsBuilder
            // Add other services.
    }

11. ////////////// example of ConnectionStrings in appsetting.json file /////
{
    "ConnectionStrings": {
    "DefaultConnection": "Data Source=.;Initial Catalog=AdsgiaIdentityDB;User ID=sa;Password=987654321;MultipleActiveResultSets=true"
  },
}

12. EF Core provides its own version of schema management called migrations.
    A migration is a C# code file in your application that defines how the
    data model changed. You can use command-line tools to create a new database
    from the migrations, or to update an existing database by applying new 
    migrations to it. You can even rollback a migration, which will update a 
    database to a previous schema.

13. To use migration we have to use .NET CLI tools. You can check they installed
    correctly by running dotnet ef --help.
    (first you have to install nuget packages in list 6)

    [ATTENTION]
    You need to run the dotnet ef tools from the project folder in which you
    have registered your AppDbContext, not at the solution-folder level

14. making the first migration after registering the AppDbContext:

        dotnet ef migrations add InitialSchema  // (InitialSchema is a name)

    This command creates three files in your solution:

    a. Migration file: A file with the Timestamp_MigrationName.cs format. This
        describes the actions to take on the database, such as Create table or Add
        column.
    b. Timestamp_MigrationName.Designer.cs file: This file describes EF Core’s internal model
        of your data model at the point in time the migration was generated.
    c. AppDbContextModelSnapshot.cs: This describes EF Core’s current internal 
        model. This will be updated when you add another migration, so it should
        always be the same as the current, latest migration.

15. These three files encapsulate the migration process but adding a migration doesn’t
update anything in the database itself. For that, you must run a different command to
apply the migration to the database:

        dotnet ef database update       (from the project folder)

    this command: 
        a. Builds your application.
        b. Loads the services configured in your app’s Startup class,
             including AppDbContext.
        c. Checks whether the database in the AppDbContext connection string exists.
            If not, creates it.
        d. Updates the database by applying any unapplied migrations

    this command builds the tables that defined in internal model, and also builds
    the _EFMigrationsHistory table that stores the name of migrations that has been
    applied to the database.

16. for example if you change one entity in your model, you have to first add new 
    migration and then update the database:

        a. dotnet ef migrations add ExtraRecipeFields
        b. dotnet ef database update

///// Saving data //////////

17. This is the service for recipe that we have to use this service in the 
    action of the controller:

        public class RecipeService {
            
            readonly AppDbContext _context;

            public RecipeService(AppDbContext Context){
                _context = Context;
            }

            // We can use this CreateRecipe function in the Action method
            public int CreateRecipe(CreateRecipeCommand cmd) {
                var recipe = new Recipe
                {
                    Name = cmd.Name;
                    TimeToCook = new TimeSpan(
                        cmd.TimeToCookHrs, cmd.TimeToCookMins, 0),
                    Method = cmd.Method,
                    IsVegetarian = cmd.IsVegetarian,
                    IsVegan = cmd.IsVegan,
                    Ingredients = cmd.Ingredients?.Select(i =>
                        new Ingredient
                        {
                            Name = i.Name,
                            Quantity = i.Quantity,
                            Unit = i.Unit,
                        }).ToList()
                };
                _context.Add(recipe); // add this recipe to the DbSet<Recipe> Recipes
                _context.SaveChanges(); // Save this to the database
                return recipe.RecipeId; // we can use this id to get the data
            }
        }

[ATTENTION]
18. If there’s a problem when EF Core tries to interact with your database,
    it will throw an exception. I haven’t shown it here, but it’s important to
    handle these in your application so you’re not presenting users with an ugly
    error page when things go wrong.

//////// Loading data ////
19.  The DbSet<Recipe> property on AppDataContext is an IQueryable, so you can
     use all the usual Select(), Where(), and Single() clauses that you would with other 
     IQueryable providers: 

        public ICollection<RecipeSummary> GetRecipes()
        {
            return _context.Recipes         /// _context is injected to this service
                .Where(r => !r.IsDeleted)
                .Select(r => new RecipeSummary  // Select is like map function
                {
                    Id = r.RecipeId,
                    Name = r.Name,
                    TimeToCook = "{r.TimeToCook.TotalMinutes}mins"
                })
                .ToList();          // This is the code that executes the command
        }

[ATTENTION]
20. EF Core can’t or doesn’t know how to convert some expressions to SQL. For those cases,
 such as in this example, EF Core finds the fields from the DB that it needs in order to
 run the expression on the client side, selects those from the database, and then runs the
 expression in C# afterwards.

21. Client-side evaluation is both powerful and useful but has the potential to cause
 issues. For certain queries, you could end up pulling back all the data from the database and processing it in memory, instead of in the
 database.

22. For getting a single element:

        public RecipeDetailModel GetRecipeDetail(int id)
        {
            return _context.Recipes
                .Where(x => x.RecipeId == id)
                .Select(x => new RecipeDetailModel
                {
                    Id = x.RecipeId,
                    Name = x.Name,
                    Method = x.Method,
                    Ingredients = x.Ingredients
                        .Select(item => new RecipeDetailModel.Item
                        {
                            Name = item.Name,
                            Quantity = $"{item.Quantity} {item.Unit}"
                        })
                })
                .SingleOrDefault();    // This is the command that execute the query
        }

23. Updating:

        public void UpdateRecipe(UpdateRecipeCommand cmd)
        {
            var recipe = _context.Recipes.Find(cmd.Id);
            // or 
            var recipe = _context.Recipes.Where(r=>r.RecipeId == cmd.Id).FirstOrDefault();
            if(recipe == null) {
                throw new Exception("Unable to find the recipe");
            }
            UpdateRecipe(recipe, cmd);
            _context.SaveChanges();
        }

        static void UpdateRecipe(Recipe recipe, UpdateRecipeCommand cmd)
        {
            recipe.Name = cmd.Name;
            recipe.TimeToCook =
            new TimeSpan(cmd.TimeToCookHrs, cmd.TimeToCookMins, 0);
            recipe.Method = cmd.Method;
            recipe.IsVegetarian = cmd.IsVegetarian;
            recipe.IsVegan = cmd.IsVegan;
        }

24. Deleting pattern :

        public void DeleteRecipe(int recipeId)
        {
            var recipe = _context.Recipes.Find(recipeId);
            if(recipe == null) {
                throw new Exception("Unable to find the recipe");
            }
            recipe.IsDeleted = true;
            _context.SaveChanges();
        }

25. We can use Model-level query filters, These allow you to specify a Where clause at
    the model level, so you could, for example, ensure that EF Core never loads Recipes
    for which IsDeleted is true.