
////// Chapter 9 (Web API)  ////

1. We can use Web API in three ways:
	a. single page applications
	b. mobile applications
	c. in micro service architecture

2. The only difference between MVC and API is: MVC controllers typically return ViewResult
or IActionResult; Web API controllers generally return data. By default return Data will
be formatted to JSON in asp.net core.


3. in Web API we call return data API model, it is just like view model, the controller 
	select the formatter and passes the api model to the formatter, the formatter 
	change the api model to JSON response. 


4. Web API controllers don’t have to return data directly. You’re free to return an
IActionResult instead, and often this is required. Two example of returning data and
returning IActionResult:

	a. returning direct data:
		public class FruitController : Controller
		{
			List<string> _fruit = new List<string>
			{
				"Pear",
				"Lemon",
				"Peach"
			};
			public IEnumerable<string> Index()
			{
				return _fruit;
			}
		}
	
	b. returning IActionResult:
		public IActionResult View(int id)
		{
			if (id >= 0 && id < _fruit.Count)
			{
				return Ok(_fruit[id]);
			}
			return NotFound();
		}

5. Using Ok(data) helper method to return data with 200 response status code
 and NotFound() to return 404 status code and BadRequest() to return 400 status code.

6. BadRequestResult, OkResult, and NotFoundResult all inherit from StatusCodeResult,
and set the appropriate status code for their type (400, 200, and 404, respectively)

7. We can use attribute routing for a action to define the URL for that action:
	[Route("contact")]
	public IActionResult Contact()
	{
		/* method implementation*/
	}

8. A single action can have multiple route attributes (But it is not a good practice)

9. We can specify a name for route attribute (It is useful in URL generation):
 	[Route("set-speed/{speed}"), Name = "set-speed"]	
	(Each route name should be unique in the application)

[ATTENTION]
10. Applying attribute routing to an action or controller means that it can never be matched
 using conventional routing.

11. using [ApiController] attribute. Applying this attribute to your controller means it must only
 use [Route] attributes; it will never match conventional routes for the actions in this controller.

12. We can use attribute routing on controller (for URL prefix):

	[Route("api/car")]
	public class CarController
	{
		[Route("start")]
		[Route("ignition")]
		[Route("/start-car")]                (this means "/start-car" url)
		public IActionResult Start()
		{
			/* method implementation*/
		}
	}



13. You can use inheritance in attribute routing and using token replacement:
	
	[Route("api/[controller]")]
	public abstract class BaseController{}
	
	public class CarController: BaseController{
		
		[Route("[action]"), Name="[controller]_[action]"]
		public IActionResult Start()
	}

14. Combine attribute routing with HTTP verbs:

		[HttpGet("/appointments")]
		public IActionResult ListAppointments()
		{
		/* method implementation */
		}

		[HttpPost("/appointments")]
		public IActionResult CreateAppointment()
		{
		/* method implementation */
		}

/// [GETTING DATA IN THE REQUEST IN JSON OR XML FORMAT]:

15.  to have the JSON data bound to your method parameter, is to add the [FromBody] attribute to
	the action parametr

[ApiController] attribute. If you decorate your Web API controller with this attribute,
you don’t need to decorate your binding models with [FromBody].The MVC middleware will infer
 that complex types should be bound using [FromBody] automatically

16. if you want to post the xml to action like this:
		[HttpPost]
		public IActionResult Add([FromBody] Car car)
		{
			return Ok();
		}

	the application returns a 415 response code, which means “Unsupported Media Type”,
	indicating that MvcMiddleware was unable to parse the XML in the body of the request.
	because the request will be send with the content type of text/xml

 17. To handle this you have to add a package and add that package to services:
	a. dotnet add package Microsoft.AspNetCore.Mvc.Formatters.Xml
	
	b.
		public void ConfigureServices(IServiceCollection services)
		{
			services.AddMvc()
			.AddXmlSerializerFormatters();
		}


//// [SENDING  DATA IN JSON OR XML FORMAT]:

18. The process of determining the format of data to send to clients is known generally
 as content negotiation (conneg)

19. There is Accept part in request header: 
 	Accept: "application/json,text/xml;q=0.9,text/plain;q=0.6"
	
	header indicates that the client can accept JSON, XML, and plain text, with weightings
	of 1.0, 0.9, and 0.6, respectively. JSON has a weighting of 1.0, as no explicit weighting
	was provided.

20. We have content type both in request an response:

	content-type: application/json; charset=utf-8


21. If .NET core can’t honor any of the types stipulated in the Accept header, it will fall back
 to returning JSON by default

22. By adding xmlformater if the accept in request header is text/xml the return type will
 be xml type.

[ATTENTION]
23. There are some points, That you have to bear in mind:
	
	a. By default, the middleware will only return application/json, text/plain and
		text/html MIME types. You can add additional IOutputFormatters to make
		other types available, as you saw in the previous section for text/xml.
	b. By default, if you return null as your API model, whether from an action
		method, or by passing null in StatusCodeResult, the middleware will return a
		204 No Content response.
	c. When you return a string as your API model, if no Accept header is set, the
	middleware will format the response as text/plain.
	d. If the middleware detects that the request is probably from a browser (the
		accept header contains */*), then it will not use conneg. Instead, it will format
		the response as though no accept header was provided, using the default formatter
		(typically JSON).

23.  If the middleware detects that the request is probably from a browser 
(the Accept header contains */*), then it will not use conneg. and ignores
the Accept part in header.
 Instead, it will format the response as though no accept header was provided,
using the default formatter (typically JSON). to undo this use:

	services.AddMvc(options =>
	{
		options.RespectBrowserAcceptHeader = true;
	});