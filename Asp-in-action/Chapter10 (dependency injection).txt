
////// Chapter 10 (dependency injection) //////

1. The controller activator calls the DI container to create an instance
 of the Controller, including all of its dependencies.

2. One of the advantages of a DI container is that it has a single 
responsibility: creating objects or services

3.  There are many existing DI containers available for .NET: Autofac,
	StructureMap, Unity, Ninject, Simple Injector

4. Code to interface not implementation for DI.


5. This approach, where in a REQUEST a class calls the DI container directly
 to ask for a class is called the SERVICE LOCATOR PATTERN.

6. Because we use interface for DI, the DI container must know the
 implementation to provide the right instance for the controller,
so we need to register the services.

7. All services should provide Add*() extension method. like AddMvc():
		public void ConfigureServices(IServiceCollection services)
		{
			services.AddMvc();
		}

8. It’s also worth noting that some of the Add*() extension methods allow
 you to specify additional options when you call them, for example: 

	services.AddMvc(options =>
	{
		options.RespectBrowserAcceptHeader = true;
	});

9.. Each Add*() method provide three pieces of information to the DI
 container:
	a. Service type: could be interface or concrete
	b. Implementation type
	c. Lifetime: Transient, Singleton or scoped
	
	example: 
	public void ConfigureServices(IServiceCollection services)
	{
		services.AddMvc();
		services.AddScoped<IEmailSender, EmailSender>();
		services.AddScoped<NetworkClient>();   // this is implementation
		services.AddSingleton<MessageFactory>();
	}

////////////////// Registering services using objects and lambdas

10. But how DI container knows to construct a instance? It makes several
 assumptions:
	a. The class has a "single" and "valid" constructor.
	b. "Vaild" means: all its constructor arguments already registered 
	with container or have Default values. for example if, there is
	string in construtor argument of service, you can register them,
	so you have to provide DEFAULT Value:

	services.AddSingleton(
		new EmailServerSettings
		(
			host: "smtp.server.com",
			port: 25
		));
	)
	[ATTENTION] this only works for singletone to provide new instance
	for different request, you can use lambda functions:
		
	
/////////////
	services.AddScoped(
		provider =>
			new EmailServerSettings
			(
				host: "smtp.server.com",
				port: 25
			));
	)

When you use a lambda to register your services, you’re 
provided with an IServiceProvider instance at runtime, called provider 


11. When we want to pass a object we must use add singleton,
because it is just a object but by using lambda function we can change
the lifetime of the object.

12. Creating extensions method to logically group dependency injections:

	public static class EmailSenderServiceCollectionExtensions
	{
		public static IServiceCollection AddEmailSender(
			this IServiceCollection services)
		{
			services.AddScoped<IEmailSender, EmailSender>();
			services.AddSingleton<NetworkClient>();
			services.AddScoped<MessageFactory>();
			services.AddSingleton(
				new EmailServerSettings
				(
					host: "smtp.server.com",
					port: 25
				));
			return services;   // this is convention for chaining
		}
	}

and use this like this:
	public void ConfigureServices(IServiceCollection services)
	{
		services.AddMvc();
		services.AddEmailSender();
	}

to have extension methods for a certain type:
	do it by defining a static class with a static method containing
	"this" keyword before the first parameter argument of that
	CERTAIN TYPE
	

13. If you want to have all the implementation for an interface:
		a. you have to register all of them:
				public void ConfigureServices(IServiceCollection services)
				{
					services.AddMvc();
					services.AddScoped<IMessageSender, EmailSender>();
					services.AddScoped<IMessageSender, SmsSender>();
					services.AddScoped<IMessageSender, FacebookSender>();
				}

		b. you have to require IEmumerable<interface> in constructor of
			the controller.
			(only IEnumerable could be used not list, ICollection, ..)
				public class UserController : Controller
				{
					private readonly IEnumerable<IMessageSender> _messageSenders;
					public UserController(
					IEnumerable<IMessageSender> messageSenders)
					{
						_messageSenders = messageSenders;
					}
				}
14. If we have several registered class for an interface and we only
	 require one in controller, the last registered will be picked by
	  DI container.

15. Normally asp.net core uses TryAdd{Scoped}<> to add components
 in this way you could override that components.

[ATTENTION]
16. With constructor injection, all of these dependencies are provided 
via the constructor. That means the DI container must create all of the
services for every action method in a controller, even if none of them
are required by the action method being called.
(So we can inject services to actions instead of controller)
 we can using [FromServices] behind the action parameter.

17. Inject services to Razor view only for services that are related to HTML
 generation.
	@inject HtmlGenerator helper
	<h1>The page title</h1>
	<footer>
		@helper.Copyright()
	</footer>

18. services lifetime depends on how to register them at ConfigureServices
 function:

	a. Transient(good for lightweight services): each time create new
	instance on different request or within one request
	(by default, controller instances are also transient and are
	 created with every new request)
	b. Scoped: create different instance on different request. Database
	   contexts and authentication services are common examples of services
	   that should be scoped to a request
	c. singleton: only one ( either expensive to create or that don’t hold
	 state)
	 (singleton services must be thread safe in web applications,
	  as they'll typically be used by multiple threads during concurrent
	   requests)for example a caching service should be singleton

19. Watched for captured dependencies in introducing the singleton services:
	A service should only use dependencies with a lifetime longer than
	or equal to the lifetime of the service

	for example:
		captured dependency because you’re injecting a scoped object,
		DataContext, into a singleton, Repository. As it’s a singleton,
		the same Repository instance is used throughout the lifetime of
		the app, so the DataContext that was injected into it will also
		hang around	
